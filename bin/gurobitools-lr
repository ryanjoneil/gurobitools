#!/usr/bin/env python

from gurobipy import quicksum, read, readParams
from gurobitools import LRModel
from itertools import izip
from optparse import OptionParser
import re

if __name__ == '__main__':
    # Set up command line options.
    parser = OptionParser()
    parser.add_option('-f', '--file', dest='file', metavar='FILE',
        help='model file in LP or MPS format'
    )
    parser.add_option('-c', '--cons', dest='cons', metavar='CONS',
        help='comma-separated list of constraints regexes ' \
             'to dualize (examples: -c c1_1,c1,2 or -c c1_.*)'
    )
    parser.add_option('-p', '--params', dest='params', metavar='PARAMS',
        help='Gurobi parameters file (optional)'
    )

    # Get and check command line options.
    (options, args) = parser.parse_args()

    if not options.file:
        parser.error('model file required')

    constraints = filter(None, (options.cons or '').split(','))
    if not constraints:
        parser.error('at least one constraint must be dualized')

    # Read parameter file if one is given
    if options.params:
        readParams(options.params)

    # Turn constraint strings into regular expressions.
    const_re = [re.compile(c) for c in constraints]

    # Now load the model and dualize all the matching constraints.
    model = read(options.file)
    lr_model = LRModel()

    # Add all variables and their bounds.
    var_map = {}
    for v in model.getVars():
        v2 = lr_model.addVar(
            lb=v.lb, ub=v.ub, obj=v.obj, vtype=v.vtype, name=v.varName
        )
        var_map[v] = v2

    lr_model.update()

    # Add or dualize all constraints
    for c in model.getConstrs():
        mexpr = model.getRow(c)
        expr = mexpr.getConstant()
        expr += quicksum(
            c*var_map[v] for c, v in izip(mexpr.__coeffs, mexpr.__vars)
        )

        if expr:
            if c.sense == '<':
                ineq = expr <= c.rhs
            elif c.sense == '>':
                ineq = expr >= c.rhs
            else:
                ineq = expr == c.rhs

        dualized = False
        for c_re in const_re:
            if c_re.match(c.constrName):
                lr_model.addLRConstr(ineq)
                dualized = True
                break

        if not dualized:
            lr_model.addConstr(ineq)

    # Add the objective function.
    obj = model.getObjective()
    expr = obj.getConstant()
    for i in xrange(obj.size()):
        v = obj.getVar(i)
        coeff = obj.getCoeff(i)
        expr += coeff * var_map[v]

    lr_model.setObjective(expr)

    # And optimize.
    lr_model.modelSense = model.modelSense
    lr_model.setParam('OutputFlag', False) # turns off solver chatter
    lr_model.LRoptimize(debug=True)

    # Pull objective and variable values out of model
    print
    print 'Iterations =', lr_model.iteration
    print 'Primal Feasible =', lr_model.primal_feasible()
    print 'Complementary Slackness =', lr_model.complementary_slackness()
    print 'LR Dual Bound =', lr_model.objVal
    print
    print 'Nonzero Variables:'

    # Ignore printing penalty variables
    penalty_vars = set(lr_model.penalties.values())
    for v in lr_model.getVars():
        if v not in penalty_vars and v.x:
            print v.varName, '=', v.x
